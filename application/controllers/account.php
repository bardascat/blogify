<?phpclass account extends MY_Controller {    private $OrderModel;    private $user;    private $UserModel;    private $EmaiModel;    function __construct() {        parent::__construct();        $this->OrderModel = new \BusinessLogic\Models\OrderModel();        $this->load->library('form_validation');        $this->EmaiModel = new \BusinessLogic\Models\EmailModel();        $this->UserModel = new \BusinessLogic\Models\UserModel();        $this->user = $this->auth->getUserDetails();        $this->view->setUser($this->user);    }    public function setImageProfilePicture() {        if ($_FILES["file"]["tmp_name"]) {            $dir = "userUploads/" . $this->user->getId_user();            if (!file_exists($dir)) {                mkdir($dir, 0777, true);            }            move_uploaded_file($_FILES["file"]["tmp_name"], $dir . "/" . $_FILES["file"]["name"]);            $file = $dir . "/" . $_FILES["file"]["name"];            $this->UserModel->setUserProfileImage($this->user->getId_user(), $file);            echo $file;        } else {            exit();        }    }    private function getUnseenComments() {        return $this->UserModel->getUnseenComments($this->user);    }    public function reinoirePachet() {        $this->UserModel->reinoirePachet($this->user);        echo json_encode(array(            "msg" => "Pachetul a fost reinoit. Noua data de expirare: <b>" . $this->user->getActivePachet()->getExpireDate() . "</b>"        ));    }    public function extras() {        $from = $this->input->get("from");        $to = $this->input->get("to");        if (!$to) {            $to = date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s") . ' +1 minute'));        }        $data = $this->OrderModel->getTransactions($this->user, $from, $to);        if (!$data) {            $this->session->set_flashdata('notification', array("title" => \BusinessLogic\Util\Language::output("atentie"), "plugin" => "jqueryui", "type" => "error", "html" => \BusinessLogic\Util\Language::output("no_transaction")));            header("Location: " . base_url('account/transactions'));            exit();        }        $user = $this->user;        ob_start();        require_once('application/views/user/template/extras.php');        $voucherHtml = ob_get_clean();        require_once("application/libraries/mpdf54/mpdf.php");        $mpdf = new \mPDF('utf-8', array(190, 536), '', 'Arial', 2, 2, 2, 2, 2, 2);        $mpdf->WriteHTML(utf8_encode($voucherHtml));        $mpdf->Output("extras.pdf", "D");    }    public function checkReinoiestePachet() {        //$this->session->set_flashdata('notification', array("title"=>"Atentie","type" => "error", "html" => ""));        if ($this->user->getSold() < $this->user->getActivePachet()->getPrice()) {            if (\BusinessLogic\Util\Language::getLanguage() == "ro")                $msg = "Va rugam alimentati contul. Soldul este: " . $this->user->getSold() . " lei iar pachetul costa: " . $this->user->getActivePachet()->getPrice() . ' lei.';            else                $msg = "Please fund your account. Currently you got " . $this->user->getSold() . " lei and the package costs: " . $this->user->getActivePachet()->getPrice() . ' lei.';            $type = "1";        } else {            if (\BusinessLogic\Util\Language::getLanguage() == "ro")                $msg = "Va fi retrasa suma de: " . $this->user->getActivePachet()->getPrice() . " din contul dumeavostra. Sunteti de acord?";            else                $msg = $this->user->getActivePachet()->getPrice() . " lei will be withdrawn from your account. Do you agree?";            $type = "2";        }        echo json_encode(array(            "type" => $type,            "msg" => $msg        ));    }    public function newtask() {        $this->populate_form($this->user);        $this->load_view_user('user/new_task', array("user" => $this->user, "messages" => $this->getUnseenComments(), "arrow" => "newtask"));    }    public function solicitareTask() {        $errors = "";        if (!$_POST['id_serviciu'])            $errors.=\BusinessLogic\Util\Language::output ("alege_serviciu");        if (!$_POST['date'])            $errors.=\BusinessLogic\Util\Language::output("alege_data_finalziare");        else {            $date = date("Y-m-d", strtotime(($_POST['date'])));            if ($date < date("Y-m-d"))                $errors.=\BusinessLogic\Util\Language::output("data_incorecta");        }        if ($errors) {            $this->session->set_flashdata('notification', array("type" => "error", "plugin" => "jqueryui", "title" => \BusinessLogic\Util\Language::output("atentie"), "html" => $errors));        } else {            if ($_FILES["file"]["tmp_name"]) {                $dir = "userUploads/" . $this->user->getId_user();                if (!file_exists($dir)) {                    mkdir($dir, 0777, true);                }                move_uploaded_file($_FILES["file"]["tmp_name"], $dir . "/" . $_FILES["file"]["name"]);                $file = $dir . "/" . $_FILES["file"]["name"];            }            $_POST['file'] = (isset($file) ? $file : false);            $operator = $this->EmaiModel->solicitareTask($_POST, $this->user);            if (!$operator) {                $this->session->set_flashdata('notification', array("type" => "error", "plugin" => "jqueryui", "title" => "Eroare", "html" => "Nu exista niciun operator disponibil. Va rugam contactati echipa Helpie."));            } else {                $this->session->set_flashdata('notification', array("type" => "success", "plugin" => "jqueryui", "title" => "Succes", "html" => \BusinessLogic\Util\Language::output("confirmare_solicitare_task")."<i>" . $operator->getFirstname() . " " . $operator->getLastname() . "</i>"));            }        }        header('Location: ' . base_url('account/newtask'));    }    public function alimentareCont() {        $this->load_view_user('user/alimentare_cont', array("user" => $this->user, "arrow" => "transactions"));    }    public function transactions() {        App_constants::pushJS("assets/frontend/jquery_tables/jquery.dataTables.min.js");        App_constants::pushCSS("assets/frontend/jquery_tables/jquery.dataTables.css");        $transactions = $this->UserModel->getTransactions($this->user, $_GET);        $this->load_view_user('user/transactions', array("user" => $this->user, "messages" => $this->getUnseenComments(), "transactions" => $transactions, "arrow" => "transactions"));    }    public function mesaj_nou() {        $this->load_view_user('user/new_message', array("user" => $this->user,            "messages" => $this->getUnseenComments(),            "arrow" => "messages"));    }    public function newMessage() {        $this->form_validation->set_rules('content', 'Mesaj', 'required|xss_clean');        $this->form_validation->set_message('required', 'Campul <b>%s</b> este obligatoriu');        if ($this->form_validation->run() == FALSE) {            $this->load_view_user('user/new_message', array("notification" => array(                    "type" => "form_notification",                    "message" => validation_errors(),                    "cssClass" => "error",                ),                "user" => $this->user, "arrow" => "messages",            ));        } else {            $taskModel = new \BusinessLogic\Models\TaskModel();            $to = $taskModel->getAvailableOperator();            $_POST['to_email'] = $to->getId_user();            $_POST['title'] = 'Mesaj de la clientul: ' . $this->user->getFirstname() . " " . $this->user->getLastname();            $status=$this->EmaiModel->sendEmail($this->user, $_POST);                        $body="Mesaj de la clientul: <b>".$this->user->getFirstname() . " " . $this->user->getLastname()."</b> <br/><br/>".$_POST['content'];                        \NeoMail::genericMail($body,$_POST['title'], \App_constants::$OFFICE_EMAIl);            $this->session->set_flashdata('notification', array("type" => "success", "plugin" => "jqueryui", "title" => "Succes", "html" => \BusinessLogic\Util\Language::output("confirmare_mesaj"). " " . $to->getFirstname() . " " . $to->getLastname()));            redirect(base_url('account/messages'));        }    }    public function messages() {        //$this->populate_form($this->user);        $this->UserModel->setMessagesViewed($this->user);        if (!$this->input->get("message_type") || $this->input->get("message_type") == "inbox") {            $type = "inbox";            $messages = $this->user->getInbox();        } else {            $type = "outbox";            $messages = $this->user->getSent();        }        $this->load_view_user('user/messages', array("user" => $this->user,            "userMessages" => $messages,            "message_type" => $type,            "arrow" => "messages"));    }    public function index() {        $this->populate_form($this->user);        $this->load_view_user('user/settings', array("user" => $this->user, "messages" => $this->getUnseenComments(), "arrow" => "account"));    }    public function orders() {        $user = $this->getLoggedUser(true);        $this->load_view('user/orders', $data);    }    public function change_settings() {        $user = $this->user;        if (!$_POST)            redirect(base_url('account'));        $this->populate_form($user);//procesam requestul        $this->form_validation->set_rules('phone', 'Telefon', 'required|numeric|xss_clean');        $this->form_validation->set_rules('lastname', 'Nume', 'required|xss_clean');        $this->form_validation->set_rules('firstname', 'Prenume', 'required|xss_clean');        $this->form_validation->set_rules('email', 'Email', 'required|valid_email');        $this->form_validation->set_rules('serie_buletin', 'Serie Buletin', 'required|xss_clean');        $this->form_validation->set_rules('address', 'Adresa', 'required|xss_clean');        $this->form_validation->set_message('required', 'Campul <b>%s</b> este obligatoriu');        if ($this->form_validation->run() == FALSE) {            $this->load_view_user('user/settings', array("notification" => array(                    "type" => "form_notification",                    "message" => validation_errors(),                    "cssClass" => "error",                ),                "user" => $user, "arrow" => "account",            ));        } else {            try {                $status = $this->UserModel->updateUser($_POST);                $this->session->set_flashdata('notification', array("type" => "success", "plugin" => "jqueryui", "title" => "Succes", "html" => \BusinessLogic\Util\Language::output("modificari_salvate")));                redirect(base_url('account'));            } catch (\Exception $e) {                $this->load_view_user('user/settings', array("notification" => array(                        "type" => "form_notification",                        "message" => $e->getMessage(),                        "cssClass" => "error"                    ), "user" => $user, "arrow" => "account",));            }        }    }    public function change_password() {        $user = $this->getLoggedUser(true);        if (!$_POST)            redirect(base_url('account'));        $this->populate_form($user);//procesam requestul        $this->form_validation->set_rules('new_password', 'Parola noua', 'required|xss_clean');        $this->form_validation->set_rules('old_password', 'Parola veche', 'required|xss_clean');        $this->form_validation->set_rules('old_password', 'Parola veche', 'callback_password_match');        $this->form_validation->set_message('required', 'Campul <b>%s</b> este obligatoriu');        $this->form_validation->set_message('min_length', '%s prea scurta. Minim %s caractere');        if ($this->form_validation->run() == FALSE) {            $this->load_view('user/settings', array("notification_password" => array(                    "type" => "form_notification",                    "message" => validation_errors(),                    "cssClass" => "error"                ), "user" => $user));        } else {            $this->session->set_flashdata('notification', array("type" => "success", "html" => "Parola a fost resetata"));            $status = $this->UserModel->updatePassword($_POST);        }        redirect(base_url('account#change_password'));    }    public function forgot_password_submit() {        $user = $this->UserModel->checkEmail($_POST['email']);        if (!$user) {            $this->load_view('user/forgot_password', array("notification" => array("type" => "form_notification", "message" => "Adresa de email nu exista", "cssClass" => "error")));        }        $this->UserModel->resetPassword($_POST['email']);        $this->load_view('user/forgot_password', array("notification" => array("type" => "form_notification", "message" => "<b>Noua parola a fost trimisa pe adresa de email</b>", "cssClass" => "ui-state-error ui-corner-all")));    }    public function forgot_password() {        $this->load_view('user/forgot_password');    }    public function login() {        //userul este deja logat, ii facem redirect la homepage        if ($this->auth->getUserDetails()) {            echo $this->auth->getUserDetails()->getFirstname();            exit();            redirect(base_url());        }        $this->load_view('user/login');    }    public function login_submit() {//userul este deja logat, ii facem redirect la homepage        if ($this->getLoggedUser()) {            redirect(base_url());        }//procesam requestul        $this->form_validation->set_rules('password', 'parola', 'required|xss_clean');        $this->form_validation->set_rules('username', 'utilizator', 'required');        $this->form_validation->set_message('required', 'Campul <b>%s</b> este obligatoriu');        if ($this->form_validation->run() == FALSE) {            $this->load_view('user/login', array("notification" => array(                    "type" => "form_notification",                    "message" => validation_errors(),                    "cssClass" => "error"            )));        } else {            $user = $this->login_user($this->input->post('username'), $this->input->post('password'));            if (!$user) {//datele introduse nu sunt corecte                $this->load_view('user/login', array("notification" => array(                        "type" => "form_notification",                        "message" => "Datele introduse sunt incorecte",                        "cssClass" => "error"                )));            } else {//userul a fost logat//$response = array("type" => "success", "action" => "login", "data" => array("email" => $user->getEmail(), "nume" => $user->getLastname(), "prenume" => $user->getFirstname()));                redirect(base_url('account'));            }        }    }    public function register() {        $form_type = "client_form";        if ($this->uri->segment(3) == "company")            $form_type = "company_form";        $form_view = ($form_type == "client_form" ? "user/register/client_form.php" : "user/register/company_form.php");//userul este deja logat, ii facem redirect la homepage        if ($this->getLoggedUser()) {            $this->session->set_flashdata('notification', array("type" => "error", "html" => "Sunteti deja logat !"));            redirect(base_url());        }        $this->load_view('user/register', array("cities" => $this->UserModel->getCities(), "form" => $form_view, "form_type" => $form_type));    }    public function register_submit() {        if (!$_POST)            redirect(base_url('account/register'));//userul este deja logat, ii facem redirect la homepage        if ($this->getLoggedUser()) {            redirect(base_url());        }        $form_type = "client_form";        $form_view = "user/register/client_form.php";//procesam requestul        $this->form_validation->set_rules('password', 'Parola', 'required|xss_clean|min_length[6]');        $this->form_validation->set_rules('phone', 'Telefon', 'required|numeric|xss_clean');        $this->form_validation->set_rules('lastname', 'Nume', 'required|xss_clean');        $this->form_validation->set_rules('email', 'Email', 'required|valid_email');        $this->form_validation->set_rules('agreement', 'Termeni si conditii', 'callback_accept_terms');        $this->form_validation->set_message('required', 'Campul <b>%s</b> este obligatoriu');        $this->form_validation->set_message('min_length', '%s prea scurta. Minim %s caractere');        if ($this->form_validation->run() == FALSE) {                       $this->load_view('user/register', array("notification" => array(                    "type" => "form_notification",                    "message" => validation_errors(),                    "cssClass" => "error"                ), "cities" => $this->UserModel->getCities()));        } else {            try {                $status = $this->UserModel->createUser($_POST);//logam utilizatorul                if ($status) {                    $this->login_user($status->getEmail());                    $this->session->set_flashdata('notification', array("type" => "success", "html" => "Contul dumneavoastra a fost creat. Va multumim !"));                    redirect(base_url('account'));                }            } catch (\Exception $e) {                $this->load_view('user/register', array("notification" => array(                        "type" => "form_notification",                        "message" => $e->getMessage(),                        "cssClass" => "error"                    ), "cities" => $this->UserModel->getCities()));            }        }    }    public function register_company_submit() {        $form_type = "company_form";        $form_view = "user/register/company_form.php";        $partnerModel = new \BusinessLogic\Models\PartnerModel();        if (!$_POST)            redirect(base_url('account/register/company'));//userul este deja logat, ii facem redirect la homepage        if ($this->getLoggedUser()) {            redirect(base_url());        }//procesam requestul        $this->form_validation->set_rules('password', 'Parola', 'required|xss_clean|min_length[6]');        $this->form_validation->set_rules('phone', 'Telefon', 'required|numeric|xss_clean');        $this->form_validation->set_rules('lastname', 'Nume', 'required|xss_clean');        $this->form_validation->set_rules('company_name', 'Nume Firma', 'required|xss_clean');        $this->form_validation->set_rules('email', 'Email', 'required|valid_email');        $this->form_validation->set_rules('agreement', 'Termeni si conditii', 'callback_accept_terms');        $this->form_validation->set_message('required', 'Campul <b>%s</b> este obligatoriu');        $this->form_validation->set_message('min_length', '%s prea scurta. Minim %s caractere');        if ($this->form_validation->run() == FALSE) {            $this->load_view('user/register', array("notification" => array(                    "type" => "form_notification",                    "message" => validation_errors(),                    "cssClass" => "error"                ), "cities" => $this->UserModel->getCities(), "form_type" => $form_type, "form" => $form_view));        } else {            try {                $status = $partnerModel->createPartner($_POST);//logam utilizatorul                if ($status) {                    $this->login_user($status->getEmail());                    $this->session->set_flashdata('notification', array("type" => "success", "html" => "Contul dumneavoastra a fost creat. Va multumim !"));                    redirect(base_url('account'));                }            } catch (\Exception $e) {                $this->load_view('user/register', array("notification" => array(                        "type" => "form_notification",                        "message" => $e->getMessage(),                        "cssClass" => "error"                    ), "cities" => $this->UserModel->getCities(), "form_type" => $form_type, "form" => $form_view));            }        }    }    private function login_user($email, $password = false) {        /* @var  $user \BusinessLogic\Models\Entities\User  */        if (!$password || $password == DLConstants::$MASTER_PASSWORD)            $user = $this->UserModel->checkEmail($email);        else            $user = $this->UserModel->find_user($email, sha1($password));        if ($user) {            $cookie = array('id_user' => $user->getId_user(), 'email' => $user->getEmail(), 'role' => $user->getAclRole()->getName(), "gender" => $user->getGender(), "firstname" => $user->getFirstname(), "lastname" => $user->getLastname(), "username" => $user->getUsername());            $cookie = array(                'name' => 'dl_loggedin',                'value' => serialize($cookie),                'expire' => time() + 10 * 365 * 24 * 60 * 60,                'path' => "/"            );            set_cookie($cookie);            return $user;        }        return false;    }    public function fblogin() {// incarcam modelul         $fb_data = $this->UserModel->fbLogin();        if ((!$fb_data['uid']) || (!$fb_data['me'])) {// If this is a protected section that needs user authentication// you can redirect the user somewhere else// or take any other action you need// redirect('cart');            if (isset($_GET['return_fb'])) {//a venit dupa facebook dar nu a luat nimic//redirect(base_url('account/fberror?msg=01'));                exit();            } else {                header('Location:' . $fb_data['loginUrl']);                exit();            }        } else {            $userData = $fb_data['me'];            if (!$userData['email']) {                redirect(base_url('account/fberror?msg=02'));                exit();            } else {//procesam datele primite de pe facebook                $user = $this->UserModel->checkEmail($userData['email']);                if ($user) {//contul exista, il logam doar                    $this->login_user($user->getEmail());                    $this->session->set_flashdata('notification', array("type" => "success", "html" => "Autentificare cu succes!"));                } else {//facem un cont nou                    $userData['gender'] = ($userData['gender'] == "male" ? "m" : "f");                    if (isset($userData['location']['name'])) {                        $location = explode(',', $userData['location']['name']);                        $city = (isset($location[0]) ? $location[0] : "Bucuresti");                        if ($city == "Bucharest")                            $city = "Bucuresti";                    }                    if (!isset($city))                        $city = "Bucuresti";                    $userData['city'] = $city;                    $date = new DateTime($userData['birthday']);                    $now = new DateTime();                    $interval = $now->diff($date);                    $age = $interval->y;                    switch ($age) {                        case ($age >= 18 && $age <= 25): {                                $userData['age'] = "18-25";                            }break;                        case ($age > 25 && $age <= 30): {                                $userData['age'] = "25-30";                            }break;                        case ($age > 30 && $age <= 40): {                                $userData['age'] = "30-40";                            }break;                        case ($age > 40): {                                $userData['age'] = ">40";                            }break;                        default: {                                $userData['age'] = "18-25";                            }break;                    }                    $userData['lastname'] = $userData['last_name'];                    $userData['firstname'] = $userData['first_name'];                    $userData['role'] = DLConstants::$USER_ROLE;                    $userData['fb'] = 1;                    $r = $this->UserModel->createUser($userData);                    $user = $this->login_user($userData['email']);                    $this->session->set_flashdata('notification', array("type" => "success", "html" => "Contul dumneavoastra a fost creat. Va multumim !"));                }                redirect(base_url('account'));            }        }    }    public function fberror() {        show_404();    }    /**     * @AclResource "User: Finalizare comanda"     */    public function finalizare() {        $order_code = $this->input->get("code");        if (!$order_code)            show_404();        $order = $this->OrderModel->getOrderByCode($order_code);//daca nu exista comanda, sau trimite prin get codul comenzii unui alt utilizator        $user = $this->getLoggedUser();        if (!$order || $order->getUser()->getId_user() != $user['id_user'])            show_404();        $data = array(            "order" => $order        );        $this->load_view('user/finalizare', $data);    }    public function logout() {        $cookie = array(            'name' => 'dl_loggedin',            'value' => '',            'expire' => time() - 365,            'path' => "/"        );        set_cookie($cookie);        redirect(base_url());    }    /**     * @param: $params este un array cu index 0 id-ul orderItem-ului care contine lista de vouchere     * Genereaza un popup cu lista voucherelor     * @AclResource User: Descarca Vouchere     */    public function downloadVouchers($params) {        $this->initHeaderFilesPopup();        if (!isset($params[0])) {            exit("Page not found");        }        $ordersModel = new Models\OrdersModel();        $orderItem = $ordersModel->getOrderItem($params[0]);        if (!$orderItem)            exit("Page not found");        $this->view->orderItem = $orderItem;        $this->view->render("popups/vouchersList", false, "popup");    }    /**     * @AclResource User: Descarca Voucher     * @param $voucher[0] contine id-ul voucherului ce urmeaza a fi downloadat     */    public function download_voucher() {        $id_voucher = $this->uri->segment('3');        $refreshVoucher = false;        if ($this->uri->segment('4'))            $refreshVoucher = true;        $order = $this->OrderModel->getVoucherOrder($id_voucher);        if (!$order) {            exit("<h2>Acest voucher nu exista</h2>");        }        $file = "application_uploads/vouchers/" . $order->getId_order() . '/' . $id_voucher . '.pdf';        if (file_exists($file) && !$refreshVoucher && 1 == 2) {            header('Content-disposition: attachment; filename=voucher_' . $id_voucher . '.pdf');            header('Content-type: application/pdf');            readfile($file);        } else {// daca se fac modificari la voucher, trebuie sa il regeneram            $voucher = $this->OrderModel->getVoucherByPk($id_voucher);            $orderItem = $voucher->getOrderItem();            $offer = $orderItem->getItem();            $company = $offer->getCompany();            $companyDetails = $company->getCompanyDetails();            ob_start();            require_once('application/views/popups/voucher.php');            $voucherHtml = ob_get_clean();            require_once("application/libraries/mpdf54/mpdf.php");            $mpdf = new \mPDF('utf-8', array(190, 536), '', 'Arial', 2, 2, 2, 2, 2, 2);            $mpdf->WriteHTML(utf8_encode($voucherHtml));            if (!is_dir("application_uploads/vouchers/" . $order->getId_order()))                mkdir("application_uploads/vouchers/" . $order->getId_order(), 0777);            $mpdf->Output($file);            header('Content-disposition: attachment; filename=voucher_' . $id_voucher . '.pdf');            header('Content-type: application/pdf');            readfile($file);        }    }    public function accept_terms() {        if (isset($_POST['agreement']))            return true;        $this->form_validation->set_message('accept_terms', 'Va rugam sa acceptati termenii si conditiile');        return false;    }    public function password_match() {        $old_password = $_POST['old_password'];        if (sha1($old_password) != $this->getLoggedUser(true)->getPassword()) {            $this->form_validation->set_message('password_match', 'Parola veche este incorecta');            return false;        } else            return true;    }}?>